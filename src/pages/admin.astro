---
import Layout from "../layouts/Layout.astro";
const linksExpire = Date.now() + 600000;
---

<Layout title="Admin">
    <main>
        <h1>Admin</h1>
        <section>
            <div id="login">
                <label for="pass">Enter password:</label><br />
                <input type="password" id="pass" name="password" required /><br
                />
                <button id="submit">submit</button>
                <div id="status"></div>
            </div>
            <div id="dashboard">
                <div id="env-settings-conatiner">
                    <div id="env-conatiner">
                        <fieldset>
                            <legend>Environment Variables</legend>
                            <strong
                                >These need to be set so the application will
                                work.</strong
                            >
                            <section id="env-section"></section>
                        </fieldset>
                    </div>
                    <div id="archives-conatiner">
                        <fieldset>
                            <legend>Available archives</legend>
                            <strong>
                                <span id="links-expire"></span>
                            </strong>
                            <section id="archives-section"></section>
                        </fieldset>
                    </div>
                </div>
                <div id="events-list-container">
                    <fieldset>
                        <legend>Past events</legend>
                        <div id="past-events"></div>
                    </fieldset>
                    <fieldset>
                        <legend>Upcoming events</legend>
                        <div id="upcoming-events"></div>
                    </fieldset>
                    <button id="delete-event-button">delete event(s)</button>
                </div>
                <div id="event-form">
                    <fieldset>
                        <legend>Add an event</legend>
                        <label for="title">Title:</label>
                        <br />
                        <input id="title" required />
                        <br />
                        <label for="description">Description:</label>
                        <br />
                        <textarea id="description" required></textarea>
                        <br /><br />
                        <label for="datetime">Date and Time:</label>
                        <br />
                        <input type="datetime-local" id="datetime" required />
                        <br /><br />
                        <button id="add-event-button">add event</button>
                        <br />Status: <span id="event-status"></span>
                    </fieldset>
                </div>
            </div>
        </section>
    </main>

    <template id="env-template">
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-admin"
                    name="env-admin"
                    disabled
                />
                <label for="env-admin">ADMIN_PASSWORD</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-guest"
                    name="env-guest"
                    disabled
                />
                <label for="env-guest">GUEST_PASSWORD</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <details>
            <summary>
                <input type="checkbox" id="env-host" name="env-host" disabled />
                <label for="env-host">HOST_PASSWORD</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-vonage-app"
                    name="env-vonage-app"
                    disabled
                />
                <label for="env-vonage-app">VONAGE_APP_ID</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-vonage-key"
                    name="env-vonage-key"
                    disabled
                />
                <label for="env-vonage-key">VONAGE_PRIVATE_KEY64</label>
            </summary>
            Link to Netlify section to set envionment variable and allow upload of
            private key
            <br /><input type="file" id="private-key-input" />
            <br /><textarea
                id="key-textarea"
                placeholder="VONAGE_PRIVATE_KEY64 will show up here."
            ></textarea>
            <br /><button id="copy-button">copy to clipboard</button>
        </details>
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-github"
                    name="env-github"
                    disabled
                />
                <label for="env-github">GITHUB_PAT</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <details>
            <summary>
                <input
                    type="checkbox"
                    id="env-netlify"
                    name="env-netlify"
                    disabled
                />
                <label for="env-netlify">NETLIFY_PAT</label>
            </summary>
            Link to Netlify section to set envionment variable
        </details>
        <div id="test"></div>
    </template>
</Layout>

<script>
    import "@lifelongdev/dwane-timer/dwane-timer.js";
</script>

<script is:inline>
console.log("works!");
const passwordInput = document.querySelector("#pass");
const submitBtn = document.querySelector("#submit");

// event form
const title = document.querySelector("#title");
const description = document.querySelector("#description");
const datetimeInput = document.querySelector("#datetime");
const addEventBtn = document.querySelector("#add-event-button");
const deleteEventBtn = document.querySelector("#delete-event-button");
const eventStatus = document.querySelector("#event-status");

// archives
const archivesSection = document.querySelector("#archives-section");

let events = [];
let settings = {};
let timeInMs;
let archives = [];

// Get settings file with events

// Timezone stuff
function handleDateTimeChange() {
    const timezoneHr = Math.trunc(-(new Date().getTimezoneOffset() / 60));
    const sign = timezoneHr < 0 ? "-" : "+";
    const timezoneMin = new Date().getTimezoneOffset() % 60;
    const timezoneString = `${sign}${Math.abs(timezoneHr) < 10
            ? "0" + Math.abs(timezoneHr)
            : Math.abs(timezoneHr)
        }${timezoneMin === 0 ? "00" : Math.abs(timezoneMin)}`;
    console.log("handleDateTimeChange: ", datetimeInput.value);
    // console.log("next_session_input: ",next_session_input);
    console.log(`${datetimeInput.value} GMT${timezoneString}`);
    const newDate = new Date(`${datetimeInput.value}${timezoneString}`);
    // console.log({ newDate });
    timeInMs = Date.parse(newDate);
    console.log({ timeInMs });
    console.log(new Date(timeInMs).toLocaleString());
    console.log(
        "datetimeSplit: ",
        datetimeInput.value.split("T")[0].split("-")
    );
    const datetimeSplit = datetimeInput.value.split("T")[0].split("-");
    console.log("yearMonth: ", `${datetimeSplit[0]}-${datetimeSplit[1]}`);
    yearMonth = `${datetimeSplit[0]}-${datetimeSplit[1]}`;
    // dispatch('datetimechange', {
    //     datetimeMs: timeInMs
    // });
}

async function handleAddEvent() {
    console.log("add event!");
    if (title.value !== "" && description.value !== "" && timeInMs) {
        try {
            eventStatus.textContent = "generating credentials...";
            const credsResponse = await fetch(
                `/.netlify/functions/generate_creds`
            );
            const credsJSON = await credsResponse.json();
            console.log("credsJSON: ", credsJSON);
            eventStatus.textContent = "saving event...";
            const eventToAdd = {
                title: title.value,
                description: description.value,
                timeInMs,
                applicationId: credsJSON.applicationId,
                sessionId: credsJSON.sessionId,
                conversationId: credsJSON.conversationId,
            };
            console.log("eventToSave: ", eventToAdd);

            settings.events = settings.events
                ? [...settings.events, eventToAdd]
                : [eventToAdd];
            console.log("settings: ", settings);
            const saveSettingsJSON = await postData(
                `/.netlify/functions/save_settings`,
                settings
            );
            console.log("saveSettingsJSON: ", saveSettingsJSON);
            events = settings.events;
            eventStatus.textContent = "successfully saved!";
            title.value = "";
            description.value = "";
            setTimeout(() => {
                eventStatus.textContent = "";
            }, 1000);

            loadEvents();

            // get credentials
            // console.log("sumbitPassword", passwordInput.value);
            // // status = "saving settings";
            // const dataToSend = {
            //     password: passwordInput.value,
            //     role: 'admin'
            // }
            // const loginResponse = await postData(`/.netlify/functions/check_password`, dataToSend);
            // // status = "settings saved successfully"
            // console.log("loginResponse: ", loginResponse);
            // if (loginResponse.authorized){
            //     document.querySelector("#login").style.display = "none";
            //     loadDashboard();
            // }
        } catch (error) {
            // status = error;
            console.error(error);
            eventStatus.textContent = error.toString();
        }
    }
}

async function handleDeleteEvent() {
    console.log("delete event!");
    const eventsToDelete = document.querySelectorAll(
        "input[name=event]:checked"
    );
    console.log("eventsToDelete: ", eventsToDelete);
    let eventsPending = events;
    if (eventsToDelete.length > 0) {
        console.log("start deleting");
        deleteEventBtn.disabled = true;
        eventStatus.textContent = `deleting event${eventsToDelete.length > 1 ? "s" : ""
            }`;
        eventsToDelete.forEach((eventToDelete) => {
            console.log("eventToDelete: ", eventToDelete);
            const foundIndex = eventsPending.findIndex(
                (event) => event.timeInMs === parseInt(eventToDelete.value)
            );
            eventsPending.splice(foundIndex, 1);
        });
        console.log("events: ", events);
        settings.events = eventsPending;
        console.log("settings: ", settings);

        try {
            const saveSettingsJSON = await postData(
                `/.netlify/functions/save_settings`,
                settings
            );
            console.log("saveSettingsJSON: ", saveSettingsJSON);
            eventStatus.textContent = "successfully deleted!";
            setTimeout(() => {
                eventStatus.textContent = "";
            }, 1000);
            events = settings.events;
            loadEvents();
        } catch (error) {
            // status = error;
            console.error(error);
            eventStatus.textContent = error.toString();
        }
        deleteEventBtn.disabled = false;
    }
    // if (title.value !== "" && description.value !== "" && timeInMs){
    //     try {
    //         eventStatus.textContent = "generating credentials...";
    //         const credsResponse = await fetch(`/.netlify/functions/generate_creds`);
    //         const credsJSON = await credsResponse.json();
    //         console.log("credsJSON: ", credsJSON);
    //         eventStatus.textContent = "saving event...";
    //         const eventToAdd = {
    //             title: title.value,
    //             description: description.value,
    //             timeInMs,
    //             applicationId: credsJSON.applicationId,
    //             sessionId: credsJSON.sessionId
    //         }
    //         console.log("eventToSave: ", eventToAdd);

    //         settings.events = settings.events ? [...settings.events, eventToAdd] : [eventToAdd];
    //         events = settings.events;
    //         console.log("settings: ", settings);
    //         const saveSettingsJSON = await postData(`/.netlify/functions/save_settings`, settings);
    //         console.log("saveSettingsJSON: ", saveSettingsJSON);
    //         eventStatus.textContent = "successfully saved!";
    //         setTimeout(() => {
    //             eventStatus.textContent = "";
    //         }, 1000)

    //         loadEvents();

    //     } catch (error) {
    //         // status = error;
    //         console.error(error);
    //         eventStatus.textContent = error.toString();
    //     }

    // }
}

datetimeInput.addEventListener("change", handleDateTimeChange, false);
addEventBtn.addEventListener("click", handleAddEvent, false);
deleteEventBtn.addEventListener("click", handleDeleteEvent, false);

// Example POST method implementation:
async function postData(url = "", data = {}) {
    // Default options are marked with *
    const response = await fetch(url, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        // mode: "cors", // no-cors, *cors, same-origin
        // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        // credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data), // body data type must match "Content-Type" header
    });
    return response.json(); // parses JSON response into native JavaScript objects
}

function handleFiles(event, callback) {
    const fileList = event.target.files;
    const numFiles = fileList.length;
    const reader = new FileReader();
    reader.onload = (e) => {
        callback(e.target.result.split(";base64,")[1]);
    };
    reader.readAsDataURL(fileList[0]);
}

function loadEvents() {
    console.log("loadEvents: ", events);
    const pastEvents = document.querySelector("#past-events");
    const upcomingEvents = document.querySelector("#upcoming-events");
    pastEvents.innerHTML = "";
    upcomingEvents.innerHTML = "";
    events.sort((a, b) => a.timeInMs - b.timeInMs);
    events.map((event) => {
        if (event.timeInMs > Date.now()) {
            console.log("upcoming event");
            upcomingEvents.innerHTML += `
                <input type="checkbox" value=${event.timeInMs} name="event">${event.title}<br/>
                <details>
                    <summary>Description</summary>
                    ${event.description}
                </details>`;
        } else {
            console.log("past event");
            pastEvents.innerHTML += `
                <input type="checkbox" value=${event.timeInMs} name="event">${event.title}<br/>
                <details>
                    <summary>Description</summary>
                    ${event.description}
                </details>`;
        }
    });
}

function loadArchives() {
    console.log("loadArchives: ", archives);
    const linksExpireSpan = document.querySelector("#links-expire");
    let availableCount = 0;
    archives.map((archive) => {
        if (archive.status === "available") {
            availableCount++;
            archivesSection.innerHTML += `
                <details>
                    <summary>${archive.name
                } will be deleted by &nbsp<dwane-timer timer-deadline="${archive.createdAt + 252000000
                }" countdown-start="3600000"></dwane-timer></summary>
                    <a href="${archive.url}" target="_blank">download</a>
                </details>`;
        }
    });
    if (availableCount > 0) {
        linksExpireSpan.innerHTML = `Downloads links expire in &nbsp<dwane-timer timer-deadline="${Date.now() + 600000
            }" countdown-start="3600000"></dwane-timer>`;
    } else {
        linksExpireSpan.innerHTML = "No archives available";
    }
}

async function loadDashboard() {
    console.log("load dashboard!");
    document.querySelector("#dashboard").style.display = "flex";
    try {
        // get settings file
        const settingsResponse = await fetch(
            `/.netlify/functions/get_settings`
        );
        settings = await settingsResponse.json();
        console.log("settings: ", settings);
        events = settings.events;
        console.log("events: ", events);
        loadEvents();

        // get archives
        const archivesResponse = await fetch(
            `/.netlify/functions/get_archives`
        );
        archives = await archivesResponse.json();
        console.log("archives: ", archives);
        loadArchives();

        // get env
        const envResponse = await fetch(`/.netlify/functions/check_env`);
        const envSet = await envResponse.json();
        console.log("envSet: ", envSet);
        const envSection = document.querySelector("#env-section");
        const envTemplate = document.querySelector("#env-template");
        const envClone = envTemplate.content.cloneNode(true);

        envClone.querySelector("#env-admin").checked =
            envSet.ADMIN_PASSWORDset;
        envClone.querySelector("#env-host").checked =
            envSet.HOST_PASSWORDset;
        envClone.querySelector("#env-guest").checked =
            envSet.GUEST_PASSWORDset;
        envClone.querySelector("#env-netlify").checked =
            envSet.NETLIFY_PATset;
        envClone.querySelector("#env-github").checked =
            envSet.GITHUB_PATset;
        envClone.querySelector("#env-vonage-app").checked =
            envSet.VONAGE_APP_IDset;
        envClone.querySelector("#env-vonage-key").checked =
            envSet.VONAGE_PRIVATE_KEY64set;

        envSection.appendChild(envClone);

        document.querySelector("#private-key-input").addEventListener(
            "change",
            (event) => {
                handleFiles(event, (key) => {
                    document.querySelector("#key-textarea").textContent =
                        key;
                });
            },
            false
        );

        // https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard#using_execcommand
        const copyButton = document.querySelector("#copy-button");
        copyButton.addEventListener("click", () => {
            console.log("copy click!");
            let keyText = document.querySelector("#key-textarea");
            keyText.select();
            document.execCommand("copy");
            copyButton.textContent = "copied to clipboard";
            setTimeout(() => {
                copyButton.textContent = "copy to clipboard";
            }, 1000);
        });
    } catch (error) {
        console.error(error);
    }
}

async function submitPassword() {
    if (passwordInput.value !== "") {
        try {
            console.log("sumbitPassword", passwordInput.value);
            // status = "saving settings";
            const dataToSend = {
                password: passwordInput.value,
                role: "admin",
            };
            const loginResponse = await postData(
                `/.netlify/functions/check_password`,
                dataToSend
            );
            // status = "settings saved successfully"
            console.log("loginResponse: ", loginResponse);
            if (loginResponse.authorized) {
                document.querySelector("#login").style.display = "none";
                loadDashboard();
            }
        } catch (error) {
            // status = error;
        }
    }
}

submitBtn.addEventListener("click", submitPassword, false);
</script>

<style>
    #links-expire {
        display: flex;
        align-items: flex-end;
        justify-content: center;
    }
</style>
