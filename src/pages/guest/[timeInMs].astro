---
import Layout from "../../layouts/Layout.astro";

const { timeInMs } = Astro.params;
const response = await fetch(
    Astro.url.origin + "/.netlify/functions/get_settings",
);
const data = await response.json();
const eventData = data.events.filter((event) => event.timeInMs == timeInMs);
if (eventData.length === 0) return Astro.redirect("/guest");
const applicationId = eventData[0].applicationId;
const sessionId = eventData[0].sessionId;
const conversationId = eventData[0].conversationId;
---

<Layout title="Guest">
    <main>
        <h1><a href={Astro.url.origin + "/guest"}> &lt;</a>Guest Dashboard</h1>
        <section
            data-session-id={sessionId}
            data-application-id={applicationId}
            data-conversation-id={conversationId}
        >
            <div id="login">
                <label for="name">Enter your name:</label><br />
                <input type="text" id="name" name="name" required /><br />
                <label for="pass">Enter password:</label><br />
                <input type="password" id="pass" name="password" required /><br
                />
                <button id="submit">submit</button>
                <div id="status"></div>
            </div>
            <div id="dashboard">
                <!-- <h1>guest dashboard</h1> -->
                <section id="publisher-section">
                    <inputs-select></inputs-select>
                    <!-- <div id="publisher"></div> -->
                    <br /><br />
                    <!-- <div id="host-dashboard"></div> -->
                    <video-publisher auto-publish="false"></video-publisher>
                    <div id="controls">
                        <button id="toggle-video">toggle Video</button>
                        <button id="toggle-audio">toggle Audio</button>
                        <button id="cycle">cycle Video</button>
                    </div>
                    <screen-share></screen-share>
                </section>
                <section id="subscribers-section">
                    <video-subscribers></video-subscribers>
                </section>
                <section id="chat-section">
                    <div id="chat-loading">chat goes here</div>
                    <div id="chat-application">
                        <!-- <vc-members></vc-members> -->
                        <div id="chat-section">
                            <vc-messages></vc-messages>
                            <div>
                                <vc-text-input typingTimeout="1500"
                                ></vc-text-input>
                                <vc-typing-indicator></vc-typing-indicator>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- <div id="guest-dashboard"></div>
                <video-publisher></video-publisher>
                <screen-share></screen-share>
                <video-subscribers></video-subscribers> -->
            </div>
        </section>
    </main>
</Layout>

<style>
    #login {
        display: grid;
        place-items: center;
        place-content: center;
        height: 80dvh;
    }
    #dashboard {
        display: none;
        justify-content: center;
    }

    #controls {
        display: none;
    }

    video-publisher,
    screen-share {
        width: 100%;
        aspect-ratio: 16 / 9;
        padding: 0;
    }

    video-subscribers {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
        place-items: center;
    }

    section {
        width: 100%;
    }

    #publisher-section {
        max-width: 300px;
    }

    #chat-application {
        display: none;
        align-items: flex-start;
        justify-content: space-between;
        width: 100%;
    }

    vc-messages {
        height: 300px;
    }

    vc-text-input {
        font-size: 20px;
    }
</style>

<script>
    import "@vonage/video-publisher/video-publisher.js";
    import "@vonage/video-subscribers/video-subscribers.js";
    import "@vonage/screen-share/screen-share.js";
    import "@vonage/inputs-select/inputs-select.js";
    import "@vonage/vc-messages/vc-messages.js";
    import "@vonage/vc-typing-indicator/vc-typing-indicator";
    import "@vonage/vc-text-input/vc-text-input.js";
</script>

<script is:inline>
const sectionEl = document.querySelector("section");
const nameInput = document.querySelector("#name");
const passwordInput = document.querySelector("#pass");
const submitBtn = document.querySelector("#submit");
const vonageInput = document.querySelector("vc-text-input");
const vonageTypingIndicator = document.querySelector("vc-typing-indicator");
const vonageMessagesFeed = document.querySelector("vc-messages");
const chatApplication = document.querySelector("#chat-application");
const chatLoading = document.querySelector("#chat-loading");
const applicationId = sectionEl.dataset.applicationId;
const sessionId = sectionEl.dataset.sessionId;
const conversationId = sectionEl.dataset.conversationId;

let client;
let app;
let conversation;

// Example POST method implementation:
async function postData(url = "", data = {}) {
    // Default options are marked with *
    const response = await fetch(url, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        // mode: "cors", // no-cors, *cors, same-origin
        // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        // credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data), // body data type must match "Content-Type" header
    });
    return response.json(); // parses JSON response into native JavaScript objects
}

async function loadDashboard() {
    document.querySelector("#dashboard").style.display = "flex";
    try {
        // get tokens
        const tokensResponse = await fetch(
            "/.netlify/functions/generate_tokens",
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: JSON.stringify({ sessionId, role: "publisher" }),
            },
        );
        const tokensData = await tokensResponse.json();
        const { videoToken } = tokensData;

        // Log into chat
        const chatData = await postData(`/.netlify/functions/join_chat`, {
            name: nameInput.value,
            conversationId,
        });
        const { chatToken } = chatData;

        const client = new vonageClientSDK.VonageClient();
        await client.createSession(chatToken);
        vonageInput.client = client;
        vonageInput.conversationId = conversationId;
        vonageTypingIndicator.client = client;
        vonageTypingIndicator.conversationId = conversationId;
        vonageMessagesFeed.client = client;
        vonageMessagesFeed.conversationId = conversationId;

        chatLoading.style.display = "none";
        chatApplication.style.display = "flex";

        // Initialize a Vonage Video Session object
        const session = OT.initSession(applicationId, sessionId);

        const videoPublisherEl = document.querySelector("video-publisher");
        const videoSubscribersEl =
            document.querySelector("video-subscribers");
        const screenShareEl = document.querySelector("screen-share");
        const inputsSelectEl = document.querySelector("inputs-select");
        const controlsDiv = document.querySelector("#controls");
        const toggleVideoBtn = document.querySelector("#toggle-video");
        const toggleAudioBtn = document.querySelector("#toggle-audio");
        const cycleBtn = document.querySelector("#cycle");

        // Set session and token for Web Components

        videoSubscribersEl.properties = { width: "200px", height: "200px" };
        videoSubscribersEl.session = session;
        videoSubscribersEl.token = videoToken;

        screenShareEl.session = session;
        screenShareEl.token = videoToken;
        screenShareEl.properties = {
            width: "100%",
            showControls: false,
        };

        inputsSelectEl.addEventListener("inputsSelected", (event) => {
            inputsSelectEl.style.display = "none";
            videoPublisherEl.session = session;
            videoPublisherEl.token = videoToken;
            videoPublisherEl.properties = {
                width: "100%",
                name: nameInput.value,
                audioSource: event.detail.audioSource,
                videoSource: event.detail.videoSource,
            };
            videoPublisherEl.style.display = "block";
            videoPublisherEl.startPublish();
            videoPublisherEl.addEventListener("published", (event) => {
                videoPublisherEl.setAttribute(
                    "id",
                    `${event.detail.publisher.stream.streamId}`,
                );
            });
            controlsDiv.style.display = "block";
        });

        toggleVideoBtn.addEventListener("click", () => {
            videoPublisherEl.toggleVideo();
        });
        toggleAudioBtn.addEventListener("click", () => {
            videoPublisherEl.toggleAudio();
        });
        cycleBtn.addEventListener("click", () => {
            videoPublisherEl.cycleVideo();
        });
    } catch (error) {
        console.error(error);
    }
}

async function submitPassword() {
    if (passwordInput.value !== "") {
        try {
            const dataToSend = {
                password: passwordInput.value,
                role: "guest",
            };
            const loginResponse = await postData(
                `/.netlify/functions/check_password`,
                dataToSend,
            );
            if (loginResponse.authorized) {
                document.querySelector("#login").style.display = "none";
                loadDashboard();
            }
        } catch (error) {
            console.error("Error logging in: ", error);
        }
    }
}

submitBtn.addEventListener("click", submitPassword, false);
</script>
