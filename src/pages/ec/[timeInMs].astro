---
import Layout from "../../layouts/Layout.astro";

const { timeInMs } = Astro.params;
const response = await fetch(
    Astro.url.origin + "/.netlify/functions/get_settings",
);
const data = await response.json();
const eventData = data.events.filter((event) => event.timeInMs == timeInMs);
if (eventData.length === 0) return Astro.redirect("/");
const { applicationId, sessionId, conversationId } = eventData[0];

const tokensResponse = await fetch(
    Astro.url.origin + "/.netlify/functions/generate_tokens",
    {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: JSON.stringify({ sessionId, role: "subscriber" }),
    },
);
const tokensData = await tokensResponse.json();
const { videoToken } = tokensData;
---

<Layout title="Watch">
    <section
        data-video-token={videoToken}
        data-session-id={sessionId}
        data-application-id={applicationId}
        data-conversation-id={conversationId}
    >
        <div id="video-subscriber-container">
            <div id="scene">
                <div>
                    <h1>{eventData[0].title}</h1>
                    <br /><br /><p id="scene-status"></p>
                </div>
            </div>
            <div id="screen-container"></div>
            <div id="camera-container"></div>
        </div>
    </section>
</Layout>

<style>
    #video-subscriber-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100vw;
        height: 90vh;
        position: relative;
    }

    section {
        display: flex;
    }
    video-subscribers {
        display: none;
    }

    #scene {
        display: none;
        /* display: flex; */
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: center;
        position: absolute;
        background-color: white;
        z-index: 20;
        text-align: center;
    }

    video {
        width: 100%;
        aspect-ratio: 16 / 9;
    }

    .OT_subscriber {
        aspect-ratio: 16 / 9;
    }

    video-subscriber::part(container) {
        aspect-ratio: 16 / 9;
    }

    #camera-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
        place-items: center;
        width: 100%;
        aspect-ratio: 16 / 9;
    }

    #screen-container {
        width: 0;
    }

    #screen-container:has(> video-subscriber) {
        width: 100%;
        aspect-ratio: 16 / 9;
    }

    #screen-container:has(> video-subscriber) + #camera-container {
        display: block;
        width: 30%;
    }
</style>

<script>
    import "@vonage/video-subscriber/video-subscriber.js";
</script>

<script is:inline>
const sectionEl = document.querySelector("section");
const screenContainer = document.querySelector("#screen-container");
const cameraContainer = document.querySelector("#camera-container");

async function postData(url = "", data = {}) {
    // Default options are marked with *
    const response = await fetch(url, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        // mode: "cors", // no-cors, *cors, same-origin
        // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        // credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data), // body data type must match "Content-Type" header
    });
    return response.json(); // parses JSON response into native JavaScript objects
}

window.addEventListener("load", () => {
    const sessionId = sectionEl.dataset.sessionId;
    const applicationId = sectionEl.dataset.applicationId;
    const conversationId = sectionEl.dataset.conversationId;
    const videoToken = sectionEl.dataset.videoToken;
    // Initialize an Vonage Video Session object
    const session = OT.initSession(applicationId, sessionId);

    session.connect(videoToken, function (error) {
        if (error) {
            console.error(error.message);
        }
    });

    session.on("streamCreated", function (event) {
        // check to see if event.stream.videoType is camera or screen
        if (
            event.stream.videoType === "screen" ||
            event.stream.videoType === "custom"
        ) {
            const videoSubscriberEl =
                document.createElement("video-subscriber");
            videoSubscriberEl.setAttribute(
                "id",
                `${event.stream.streamId}`,
            );
            videoSubscriberEl.session = session;
            videoSubscriberEl.stream = event.stream;
            videoSubscriberEl.properties = {
                width: "100%",
                height: "100%",
                showControls: false,
            };
            videoSubscriberEl.style.display = "block";
            screenContainer.appendChild(videoSubscriberEl);
        } else {
            const videoSubscriberEl =
                document.createElement("video-subscriber");
            videoSubscriberEl.setAttribute(
                "id",
                `${event.stream.streamId}`,
            );
            videoSubscriberEl.session = session;
            videoSubscriberEl.stream = event.stream;
            videoSubscriberEl.properties = {
                width: "100%",
                height: "100%",
            };
            videoSubscriberEl.style.display = "none";

            cameraContainer.appendChild(videoSubscriberEl);
            const selectedSubscriber = document.querySelector(
                `[id="${event.stream.streamId}"]`,
            );
            selectedSubscriber.addEventListener("subscribed", (event) => {
                event.detail.subscriber.subscribeToAudio(false);
            });
        }
    });

    function updateDisplay(signal) {
        const display =
            signal.display.toLowerCase() === "true" ? true : false;
        const selectedSubscriber = document.querySelector(
            `[id="${signal.id}"]`,
        );
        if (selectedSubscriber) {
            selectedSubscriber.subscribeToAudio(display);
            selectedSubscriber.style.display = display ? "block" : "none";
        }
    }

    session.on("signal:toggle-display", (event) => {
        const signal = JSON.parse(event.data);
        updateDisplay(signal);
    });
    session.on("signal:update-displays", (event) => {
        const signalArray = JSON.parse(event.data);
        signalArray.forEach((signal) => updateDisplay(signal));
    });
    session.on("signal:update-scene", (event) => {
        const sceneEl = document.querySelector("#scene");
        const sceneStatus = document.querySelector("#scene-status");
        if (event.data === "") {
            sceneEl.style.display = "none";
        } else {
            sceneStatus.textContent = event.data;
            sceneEl.style.display = "flex";
        }
    });
});
</script>
