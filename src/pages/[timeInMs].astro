---
import Layout from "../layouts/Layout.astro";

const { timeInMs } = Astro.params;
const response = await fetch(
    Astro.url.origin + "/.netlify/functions/get_settings",
);
const data = await response.json();
const eventData = data.events.filter((event) => event.timeInMs == timeInMs);
if (eventData.length === 0) return Astro.redirect("/");
console.log("eventData: ", eventData);
const { applicationId, sessionId, conversationId } = eventData[0];

const tokensResponse = await fetch(
    Astro.url.origin + "/.netlify/functions/generate_tokens",
    {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: JSON.stringify({ sessionId, role: "subscriber" }),
    },
);
const tokensData = await tokensResponse.json();
console.log("tokensData: ", tokensData);
const { videoToken } = tokensData;
---

<Layout title="Watch">
    <h1>Watch page</h1>

    <section
        data-video-token={videoToken}
        data-session-id={sessionId}
        data-application-id={applicationId}
        data-conversation-id={conversationId}
    >
        <!-- <video-publisher width="300px" height="240px"></video-publisher> -->

        <!-- <video-subscribers></video-subscribers> -->
        <div id="video-subscriber-container">
            <div id="scene">
                <div>
                    <h1>{eventData[0].title}</h1>
                    <br /><br /><p id="scene-status"></p>
                </div>
            </div>
            <div id="screen-container"></div>
            <div id="camera-container"></div>
        </div>

        <div id="chat-section">
            <div id="chat-login">
                <label for="name">Enter your name for chat:</label><br />
                <input type="text" id="name" name="name" required /><br />
                <button id="submit">submit</button>
                <div id="login-status"></div>
            </div>
            <div id="chat-application">
                <!-- <vc-members></vc-members> -->
                <div id="chat-section">
                    <vc-messages></vc-messages>
                    <div>
                        <vc-text-input typingTimeout="1500"></vc-text-input>
                        <vc-typing-indicator></vc-typing-indicator>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <dialog id="welcome-dialog">
        <h1>Welcome!</h1>
        <p>Remember, be kind.</p>
        <button>Got it.</button>
    </dialog>
</Layout>

<script>
    // import '@vonage/video-client@latest/dist/js/opentok.js';
    // import '@vonage/video-publisher/video-publisher.js';
    import "@vonage/video-subscriber/video-subscriber.js";
    // import '@vonage/video-subscribers/video-subscribers.js';
    // import '@vonage/screen-share/screen-share.js';
    // import '@lifelongdev/dwane-timer/dwane-timer.js';

    import "@vonage/vc-members/vc-members.js";
    import "@vonage/vc-messages/vc-messages.js";
    import "@vonage/vc-typing-indicator/vc-typing-indicator";
    import "@vonage/vc-text-input/vc-text-input.js";
</script>

<script is:inline>
console.log("document.referrer: ", document.referrer);
console.log("document.URL: ", document.URL);
console.log("window.location.hostname: ", window.location.hostname);
const sectionEl = document.querySelector("section");

const sessionId = sectionEl.dataset.sessionId;
const applicationId = sectionEl.dataset.applicationId;
const conversationId = sectionEl.dataset.conversationId;
const videoToken = sectionEl.dataset.videoToken;
console.log("sectionEl.dataset.videoToken: ", sectionEl.dataset.videoToken);
console.log("sectionEl.dataset.sessionId: ", sectionEl.dataset.sessionId);
console.log(
    "sectionEl.dataset.applicationId: ",
    sectionEl.dataset.applicationId,
);

// const videoSubscribersEl = document.querySelector('video-subscribers');
// const videoPublisherEl = document.querySelector('video-publisher');
const videoSubscriberContainer = document.querySelector(
    "#video-subscriber-container",
);
const screenContainer = document.querySelector("#screen-container");
const cameraContainer = document.querySelector("#camera-container");

const chatApplication = document.querySelector("#chat-application");
const chatLogin = document.querySelector("#chat-login");

const nameInput = document.querySelector("#name");
const submitBtn = document.querySelector("#submit");
const loginStatus = document.querySelector("#login-status");
const vonageInput = document.querySelector("vc-text-input");
const vonageTypingIndicator = document.querySelector("vc-typing-indicator");
const vonageMembers = document.querySelector("vc-members");
const vonageMessagesFeed = document.querySelector("vc-messages");

async function postData(url = "", data = {}) {
    // Default options are marked with *
    const response = await fetch(url, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        // mode: "cors", // no-cors, *cors, same-origin
        // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        // credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data), // body data type must match "Content-Type" header
    });
    return response.json(); // parses JSON response into native JavaScript objects
}

function updateDisplay(signal) {
    const display = signal.display.toLowerCase() === "true" ? true : false;
    console.log("display: ", display);
    // const subscribers = document.querySelectorAll('video-subscriber');
    // console.log("subscribers: ", subscribers);
    // for (const subscriber of subscribers) {
    //     if (subscriber.id === signal.id){
    //         console.log("subscriber found: ", subscriber.id);
    //         subscriber.subscribeToAudio(display);
    //         subscriber.style.display = display ? "block" : "none";
    //     }
    // }
    const selectedSubscriber = document.querySelector(
        `[id="${signal.id}"]`,
    );
    if (selectedSubscriber) {
        selectedSubscriber.subscribeToAudio(display);
        selectedSubscriber.style.display = display ? "block" : "none";
    }
}

function initializeVonage() {
    // Initialize a Vonage Video Session object
    const session = OT.initSession(applicationId, sessionId);
    console.log("session: ", session);
    // videoPublisherEl.session = session;
    // videoPublisherEl.token = videoToken;

    // videoSubscribersEl.session = session;
    // videoSubscribersEl.token = videoToken;
    // videoSubscriberContainer.style.display = "block";
    console.log("does the code get to here?");

    session.connect(videoToken, function (error) {
        if (error) {
            console.log(error.message);
        } else {
            // You have connected to the session. You could publish a stream now.
            console.log("session connected!");
        }
    });

    session.on("streamCreated", function (event) {
        console.log("streamCreated!!", event);
        // check to see if event.stream.videoType is camera or screen
        if (
            event.stream.videoType === "screen" ||
            event.stream.videoType === "custom"
        ) {
            const videoSubscriberEl =
                document.createElement("video-subscriber");
            videoSubscriberEl.setAttribute(
                "id",
                `${event.stream.streamId}`,
            );
            videoSubscriberEl.session = session;
            videoSubscriberEl.stream = event.stream;
            // videoSubscriberEl.width = "100%";
            // videoSubscriberEl.height = "100%";
            videoSubscriberEl.properties = {
                width: "100%",
                height: "100%",
                showControls: false,
            };
            // videoSubscriberEl.style.display = "none";
            // videoSubscriberEl.style.setProperty("aspect-ratio", "16 / 9");
            // videoSubscriberEl.style.setProperty("width", "100%");
            screenContainer.appendChild(videoSubscriberEl);
            // console.log("OT_subscriber: ", document.querySelector(`#${event.stream.streamId}`));
            // console.log("OT_subscriber: ", document.querySelector(`#${event.stream.streamId}`).shadowRoot.querySelector(".OT_subscriber"));
        } else {
            const videoSubscriberEl =
                document.createElement("video-subscriber");
            videoSubscriberEl.setAttribute(
                "id",
                `${event.stream.streamId}`,
            );
            videoSubscriberEl.session = session;
            videoSubscriberEl.stream = event.stream;
            videoSubscriberEl.properties = {
                width: "100%",
                height: "100%",
            };
            videoSubscriberEl.style.display = "none";
            // videoSubscriberEl.subscribeToAudio(false);

            cameraContainer.appendChild(videoSubscriberEl);
            const selectedSubscriber = document.querySelector(
                `[id="${event.stream.streamId}"]`,
            );
            console.log("selectedSubscriber: ", selectedSubscriber);
            selectedSubscriber.addEventListener("subscribed", (event) => {
                console.log("subscriber: ", event);
                event.detail.subscriber.subscribeToAudio(false);
                // selectedSubscriber.subscribeToAudio(false);
            });
            // selectedSubscriber.subscribeToAudio(false);
        }
    });

    session.on("signal:toggle-display", (event) => {
        console.log("got signal data: ", JSON.parse(event.data));
        const signal = JSON.parse(event.data);
        updateDisplay(signal);
        // console.log("got signal data: ", JSON.parse(event.data));
        // const signal = JSON.parse(event.data);
        // const display = signal.display.toLowerCase() === "true" ? true : false;
        // console.log("display: ", display);
        // // const subscribers = document.querySelectorAll('video-subscriber');
        // // console.log("subscribers: ", subscribers);
        // // for (const subscriber of subscribers) {
        // //     if (subscriber.id === signal.id){
        // //         console.log("subscriber found: ", subscriber.id);
        // //         subscriber.subscribeToAudio(display);
        // //         subscriber.style.display = display ? "block" : "none";
        // //     }
        // // }
        // const selectedSubscriber = document.querySelector(`[id="${signal.id}"]`);
        // selectedSubscriber.subscribeToAudio(display);
        // selectedSubscriber.style.display = display ? "block" : "none";
    });
    session.on("signal:update-displays", (event) => {
        console.log("signal:update-displays: ", event);
        console.log("JSON.parse: ", JSON.parse(event.data));
        const signalArray = JSON.parse(event.data);
        signalArray.forEach((signal) => updateDisplay(signal));
        // updateDisplay(event);
    });
    session.on("signal:update-scene", (event) => {
        console.log("signal:update-scene: ", event.data);
        const sceneEl = document.querySelector("#scene");
        const sceneStatus = document.querySelector("#scene-status");
        if (event.data === "") {
            sceneEl.style.display = "none";
        } else {
            sceneStatus.textContent = event.data;
            sceneEl.style.display = "flex";
        }
    });

    submitBtn.addEventListener("click", async () => {
        if (nameInput.value.replaceAll(" ", "") !== "") {
            console.log("nameInput.value: ", nameInput.value);
            loginStatus.textContent = "logging in...";
            // Log into chat
            const chatData = await postData(
                `/.netlify/functions/join_chat`,
                { name: nameInput.value, conversationId },
            );
            console.log("chatData: ", chatData);
            const { chatToken } = chatData;
            console.log("chatToken: ", chatToken);

            client = new NexmoClient({ debug: false });
            app = await client.createSession(chatToken);
            const conversation = await app.getConversation(conversationId);

            console.log("conversation: ", conversation);

            vonageInput.conversation = conversation;
            vonageTypingIndicator.conversation = conversation;
            // vonageMembers.conversation = conversation;
            vonageMessagesFeed.conversation = conversation;

            chatLogin.style.display = "none";
            chatApplication.style.display = "flex";

            // allows enter button to send chat messages
            const vonageInputEl =
                vonageInput.shadowRoot.querySelector("#text");
            vonageInputEl.addEventListener("keydown", (e) => {
                if (e.code === "Enter") {
                    vonageInput.__handleClickEvent();
                }
            });
        }
    });
}

window.addEventListener("load", () => {
    console.log(
        "from a page on the site? ",
        document.referrer.includes(window.location.hostname),
    );
    // Browsers don't allow for autoplay videos with audio if you have not interacted with the site yet,
    // so the participants in the video may look frozen. This will check if the person clicked from a page
    // on the site or came directly here through a link or something.
    if (document.referrer.includes(window.location.hostname)) {
        initializeVonage();
    } else {
        const welcomeDialog = document.querySelector("#welcome-dialog");
        const welcomeDialogBtn = welcomeDialog.querySelector("button");

        welcomeDialog.showModal();

        welcomeDialog.addEventListener("keydown", (event) => {
            if (event.keyCode === 27) {
                initializeVonage();
            }
        });

        welcomeDialogBtn.addEventListener("click", () => {
            welcomeDialog.close();
            initializeVonage();
        });
    }
});
</script>

<style>
    section {
        display: flex;
    }
    video-subscribers {
        display: none;
    }

    dialog {
        text-align: center;
    }

    #scene {
        display: none;
        /* display: flex; */
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: center;
        position: absolute;
        background-color: white;
        z-index: 20;
        text-align: center;
    }

    #chat-application {
        display: none;
        align-items: flex-start;
        justify-content: space-between;
        width: 100%;
    }

    vc-messages {
        height: 300px;
    }

    vc-members {
        height: 300px;
        width: 100%;
        max-width: 200px;
    }

    vc-text-input {
        font-size: 20px;
    }
    /* #video-subscriber-container {
        width: 80vw;
        height: 90vh;
        display: flex;
    } */

    /* #screen-container { */
    /* height: 0;
        padding-bottom: 56.25%; */
    /* } */

    /* video {
        width: 100%;
        aspect-ratio: 16 / 9;
    } */

    /* .OT_subscriber {
        aspect-ratio: 16 / 9;
    }

    video-subscriber::part(container) {
		aspect-ratio: 16 / 9;
	}

	#video-subscriber-container {
		display: flex;
	    justify-content: center;
	    align-items: center;
        width: 80vw;
        height: 90vh;
        position: relative;
	}

	#camera-container {
		display: grid;
  		grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
  		place-items: center;
		width: 100%;
	}

	#screen-container {
		width: 0;
	}

	#screen-container:has(> video-subscriber) {
		width: 100%;
	}

	#screen-container:has(> video-subscriber) + #camera-container {
		display: block;
		width: 30%;
	} */
</style>
